//Maximum Sum Circular Subarray


class Solution {
public:
    int maxSubarraySumCircular(vector<int>& A) {
        int n= A.size();    
        int res1=A[0],maxEnd1=A[0],sum=0;
        
        for(int i=1;i<n;i++)
        {
            maxEnd1=max(maxEnd1+A[i],A[i]);
            res1=max(maxEnd1,res1);
        }
        if(res1<0)
        {
            return res1;
        }
        else
        {         
            for(int index=0;index<n;index++)
            {
               sum+=A[index];
                A[index]=-A[index];
                //we are simply negating every number in the array and then finding maximum sum
            }
            //again calculating maxsum
            int maxEnd2=A[0],res2=A[0];
             for(int i=1;i<n;i++)
            {
                    maxEnd2=max(maxEnd2+A[i],A[i]);
                    res2=max(maxEnd2,res2);
            }
            int max_circular=max(sum,(sum+res2));
            return max(res1,max_circular);
        } 
    }
};
